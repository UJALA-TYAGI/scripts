// Import necessary dependencies and the component to test
import React from 'react';
import { render } from '@testing-library/react';
import '@testing-library/jest-dom/extend-expect'; // For expect(...).toBeInTheDocument()
import App from './App';

// Mocking dependencies
jest.mock('./hooks/UseAdfs', () => jest.fn());
jest.mock('./hooks/UseFetch', () => jest.fn());

// Mocked data for dependencies
const mockAdfsUser = { id: 1, name: 'Mock User' };

describe('App component', () => {
  // Reset the mocks before each test
  beforeEach(() => {
    jest.clearAllMocks();
  });

  test('renders home page with user data', () => {
    // Mock the return value of useAdfs and useFetch
    const useAdfsMock = jest.requireMock('./hooks/UseAdfs').default;
    const useFetchMock = jest.requireMock('./hooks/UseFetch').default;
    useAdfsMock.mockReturnValue(undefined); // Assuming adfsUser is undefined initially
    useFetchMock.mockReturnValue(mockAdfsUser);

    // Render the App component
    const { getByText } = render(<App />);

    // Assert that the Home component is rendered
    expect(getByText('Welcome, Mock User')).toBeInTheDocument();
  });
});



// Import necessary modules and dependencies
import { render, fireEvent } from '@testing-library/react';
import YourComponent from './YourComponent'; // Assuming your component file is named 'YourComponent.js'

// Mock process.env.KEY_USED_TO_HIT_SEARCH
const originalEnv = process.env;
process.env.KEY_USED_TO_HIT_SEARCH = 'your_key_value'; // Replace 'your_key_value' with the actual key value used to hit search

// Mock props and data
const props = {
  data: {
    searchItems: ['item1', 'item2', 'item3'], // Example search items
    setSearchValue: jest.fn() // Mock setSearchValue function
  }
};

describe('YourComponent', () => {
  it('should call setSearchValue with uppercased search value when key is pressed and search item matches', () => {
    const { getByLabelText } = render(<YourComponent {...props} />);
    const inputElement = getByLabelText('auto-complete-string-label');

    fireEvent.keyDown(inputElement, { key: process.env.KEY_USED_TO_HIT_SEARCH });

    expect(props.data.setSearchValue).toHaveBeenCalledTimes(1);
    expect(props.data.setSearchValue).toHaveBeenCalledWith('YOUR_SEARCH_VALUE'); // Replace 'YOUR_SEARCH_VALUE' with expected uppercased search value
  });

  it('should call setSearchValue with matched service value when service key is pressed', () => {
    const { getByLabelText } = render(<YourComponent {...props} />);
    const inputElement = getByLabelText('auto-complete-string-label');

    fireEvent.change(inputElement, { target: { value: 'service_value' } });
    fireEvent.keyDown(inputElement, { key: process.env.KEY_USED_TO_HIT_SEARCH });

    expect(props.data.setSearchValue).toHaveBeenCalledTimes(1);
    expect(props.data.setSearchValue).toHaveBeenCalledWith('SERVICE_VALUE'); // Replace 'SERVICE_VALUE' with expected service value
  });

  // Add more test cases for other scenarios as needed
});

// Restore original process.env
afterAll(() => {
  process.env = originalEnv;
});


describe('Home component', () => {
  it('calls window.location.reload with true when Retry button is clicked', () => {
    const reloadSpy = jest.spyOn(window.location, 'reload').mockImplementation(() => {});
    
    render(<Home isError={true} />); // Render the component containing handleClick with isError prop set to true
    
    // Debugging: Log the document body HTML to inspect the rendered output
    console.log(document.body.innerHTML);
    
    // Find the Retry button without entering anything in the search bar
    let retryButton = screen.queryByText('Retry'); // Use queryByText which doesn't throw error if not found
    expect(retryButton).toBeNull(); // Ensure the Retry button is not found due to error state
    
    // Simulate user input in the search bar
    const searchBar = screen.queryByPlaceholderText('Enter search query'); // Assuming placeholder text for the search bar
    expect(searchBar).toBeNull(); // Ensure the search bar is not rendered due to error state
    
    // You can add further assertions for error messages or error UI elements here
    
    reloadSpy.mockRestore(); // Restore window.location.reload to its original implementation
  });
});


import React from 'react';
import { render, fireEvent, screen } from '@testing-library/react';
import Home from './Home'; // Assuming Home.js is in the same directory

describe('Home component', () => {
  // Mocking window.location.reload
  Object.defineProperty(window.location, 'reload', {
    configurable: true,
  });
  window.location.reload = jest.fn();

  it('calls window.location.reload with true when Retry button is clicked', () => {
    render(<Home user={{ /* your user data */ }} />);

    // Simulate user input in the search bar
    const searchBar = screen.getByPlaceholderText('Enter search query'); // Assuming placeholder text for the search bar
    fireEvent.change(searchBar, { target: { value: 'Test Query' } }); // Enter a test query
    
    // Find and click the Retry button
    const retryButton = screen.getByText('Retry');
    fireEvent.click(retryButton);
    
    // Assert that reload function is called with true
    expect(window.location.reload).toHaveBeenCalledWith(true);
  });
});

True empowerment for specially-abled individuals lies in acknowledging their rights and building a world where accessibility and inclusion are the norm. However, There are overwhelming barriers on the way towards inclusivity,  and the most conspicuous impediment is the insufficient technology.

The World Health Organization reveals that ninety percent of people who require assistive technology do not have access to it, creating a distressing reality of lost education and employment opportunities for differently-abled individuals.. 

This paper will emphasize upon the pressing societal concerns that Individuals with diverse abilities encounter daily and wholeheartedly proponent for how technological innovations can reform our society into a truly accepting and fostering atmosphere for all.

Ujala Tyagi is a dedicated Software Engineer with a Bachelor's degree in Computer Science Engineering from Banasthali University, Rajasthan, India, and one year of professional experience. Currently working as a Site Reliability Engineer (SRE), Ujala also contributes to key projects like AHEAD and Backstage. AHEAD enhances visibility of AWS health notifications by aggregating and enriching these events, while Backstage provides detailed event logs of actions taken by AWS personnel on infrastructure comprising user data.

Ujala is the SEP Lead for 2024 and a core committee member of the Bengaluru Tech Center Social and Cultural Committee, where she has successfully organized numerous events. Her versatile role demonstrates her technical competence and leadership capabilities.

Apart from her career assignment, Ujala enjoys dancing, reading books and learning new languages and cultures and travels which show her as a lively and curious personality. Ujalaâ€™s combination of technical skills, management capabilities and diverse interests will be beneficial to her team and the larger society.

