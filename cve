package main

import (
	"fmt"
	"os/exec"
	"strings"
)

func GetImagePaths() []string {
	imagePaths := make([]string, 0)

	// Function to extract images from a given command output
	extractImages := func(cmd *exec.Cmd, grepPattern string) []string {
		var images []string
		pipe, err := cmd.StdoutPipe()
		if err != nil {
			fmt.Println("Error creating stdout pipe:", err)
			return images
		}
		defer pipe.Close()

		grepCmd := exec.Command("grep", grepPattern)
		grepCmd.Stdin = pipe

		if err := cmd.Start(); err != nil {
			fmt.Println("Error starting command:", err)
			return images
		}

		out, err := grepCmd.Output()
		if err != nil {
			fmt.Println("Error running grep command:", err)
			return images
		}

		imageLines := strings.Split(string(out), "\n")
		for _, imageLine := range imageLines {
			splitted := strings.Split(imageLine, ":")
			if len(splitted) == 2 && strings.TrimSpace(splitted[0]) == "image" {
				image := strings.Replace(splitted[1], "container-external", "container-release", 1)
				images = append(images, image)
			}
		}
		return images
	}

	// Extract images from the Helm template file
	helmCmd := exec.Command("helm", "template", "-f", "manifest/kyverno-values.yml", "manifests/kyverno")
	images := extractImages(helmCmd, "containerregistry")
	imagePaths = append(imagePaths, images...)

	// Extract images from the kustomization file
	kustomizeCmd := exec.Command("grep", "image:", "manifests/overlays/alpha-ida-dev/kustomization.yml")
	images = extractImages(kustomizeCmd, "image:")
	imagePaths = append(imagePaths, images...)

	return imagePaths
}

func main() {
	imagePaths := GetImagePaths()
	for _, path := range imagePaths {
		fmt.Println(path)
	}
}



package main

import (
	"fmt"
	"io/ioutil"
	"os/exec"
	"strings"
	"gopkg.in/yaml.v2"
)

func GetImagePaths() []string {
	imagePaths := make([]string, 0)

	// Read the contents of the YAML file
	yamlFile, err := ioutil.ReadFile("manifests/overlays/alpha-ida-dev/values.yaml")
	if err != nil {
		fmt.Printf("Error reading YAML file: %v\n", err)
		return imagePaths
	}

	// Define a structure to match the relevant parts of the YAML file
	type Image struct {
		Name    string `yaml:"name"`
		NewName string `yaml:"newName"`
	}

	type Kustomization struct {
		Images []Image `yaml:"images"`
	}

	var kustomization Kustomization

	// Unmarshal the YAML content into the structure
	err = yaml.Unmarshal(yamlFile, &kustomization)
	if err != nil {
		fmt.Printf("Error unmarshalling YAML file: %v\n", err)
		return imagePaths
	}

	// Extract image paths
	for _, image := range kustomization.Images {
		imagePaths = append(imagePaths, image.NewName)
	}

	return imagePaths
}

func main() {
	paths := GetImagePaths()
	for _, path := range paths {
		fmt.Println(path)
	}
}



package main

import (
	"fmt"
	"io/ioutil"
	"log"
	"reflect"
	"strings"

	"gopkg.in/yaml.v2"
)

// Constants for file paths
const (
	idaDevFilePath  = "../deploy/manifests/overlays/alpha-ida-dev/values.yaml"
	kyvernoFilePath = "../deploy/manifests/kyverno/kyverno-values.yaml"
)

// ImageConfig represents the structure for image configuration in the YAML files
type ImageConfig struct {
	Registry   string `yaml:"registry"`
	Repository string `yaml:"repository"`
	Tag        string `yaml:"tag"`
}

// Kustomization represents the structure of the kustomization file
type Kustomization struct {
	Images []struct {
		Name    string `yaml:"name"`
		NewName string `yaml:"newName"`
	} `yaml:"images"`
}

// readYAML reads and unmarshals a YAML file into the provided interface
func readYAML(filePath string, out interface{}) error {
	yamlFile, err := ioutil.ReadFile(filePath)
	if err != nil {
		return fmt.Errorf("error reading YAML file %s: %w", filePath, err)
	}
	if err := yaml.Unmarshal(yamlFile, out); err != nil {
		return fmt.Errorf("error unmarshalling YAML file %s: %w", filePath, err)
	}
	return nil
}

// formatImagePath formats the image path and replaces container-external with container-sandbox
func formatImagePath(config ImageConfig) string {
	path := fmt.Sprintf("%s/%s", config.Registry, config.Repository)
	if config.Tag != "" {
		path = fmt.Sprintf("%s:%s", path, config.Tag)
	}
	return strings.Replace(path, "container-external", "container-sandbox", 1)
}

// extractImagePathsFromStruct extracts image paths from a struct using reflection
func extractImagePathsFromStruct(v reflect.Value, imagePaths *[]string) {
	for i := 0; i < v.NumField(); i++ {
		field := v.Field(i)
		fieldType := v.Type().Field(i)
		fieldKind := field.Kind()

		if fieldKind == reflect.Struct {
			extractImagePathsFromStruct(field, imagePaths)
		} else if fieldKind == reflect.Slice || fieldKind == reflect.Array {
			for j := 0; j < field.Len(); j++ {
				extractImagePathsFromStruct(field.Index(j), imagePaths)
			}
		} else if fieldKind == reflect.Map {
			for _, key := range field.MapKeys() {
				extractImagePathsFromStruct(field.MapIndex(key), imagePaths)
			}
		} else if fieldKind == reflect.Ptr {
			extractImagePathsFromStruct(field.Elem(), imagePaths)
		} else if fieldKind == reflect.Interface && !field.IsNil() {
			if imageConfig, ok := field.Interface().(ImageConfig); ok {
				*imagePaths = append(*imagePaths, formatImagePath(imageConfig))
			} else {
				extractImagePathsFromStruct(field.Elem(), imagePaths)
			}
		} else if fieldType.Type == reflect.TypeOf(ImageConfig{}) {
			imageConfig := field.Interface().(ImageConfig)
			*imagePaths = append(*imagePaths, formatImagePath(imageConfig))
		}
	}
}

// GetImagePaths reads the image paths from the specified YAML files and returns them as a list
func GetImagePaths() []string {
	imagePaths := make([]string, 0)

	// Read and unmarshal the ida-dev YAML file
	var kustomization Kustomization
	if err := readYAML(idaDevFilePath, &kustomization); err != nil {
		log.Fatalf("Failed to read ida-dev YAML file: %v", err)
	}

	// Extract image paths from the ida-dev YAML file
	for _, image := range kustomization.Images {
		newImage := strings.Replace(image.NewName, "container-external", "container-sandbox", 1)
		imagePaths = append(imagePaths, newImage)
	}

	// Read and unmarshal the kyverno YAML file
	var kyvernoConfig map[string]interface{}
	if err := readYAML(kyvernoFilePath, &kyvernoConfig); err != nil {
		log.Fatalf("Failed to read kyverno YAML file: %v", err)
	}

	// Convert kyvernoConfig to a reflect.Value
	kyvernoValue := reflect.ValueOf(kyvernoConfig)
	extractImagePathsFromStruct(kyvernoValue, &imagePaths)

	return imagePaths
}

func main() {
	paths := GetImagePaths()
	for _, path := range paths {
		fmt.Println(path)
	}
}
