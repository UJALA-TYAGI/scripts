import React, { useState, useEffect } from "react";
import { useParams, useNavigate } from "react-router-dom";
import "./EventForm.css";

const EventForm = ({ addForm, updateForm, forms }) => {
  const { id } = useParams();
  const navigate = useNavigate();

  // If editing, load form data else empty form
  const editingForm = id && forms ? forms.find((f) => f.id === id) : null;

  const [userName, setUserName] = useState(editingForm ? editingForm.userName : "");
  const [userId, setUserId] = useState(editingForm ? editingForm.userId : "");
  const [eventName, setEventName] = useState(editingForm ? editingForm.eventName : "");
  const [location, setLocation] = useState(editingForm ? editingForm.location : "");
  const [date, setDate] = useState(editingForm ? editingForm.date : "");
  const [participants, setParticipants] = useState(editingForm ? editingForm.participants : [""]);
  const [objectives, setObjectives] = useState(editingForm ? editingForm.objectives : "");
  const [description, setDescription] = useState(editingForm ? editingForm.description : "");

  useEffect(() => {
    if (editingForm) {
      setUserName(editingForm.userName);
      setUserId(editingForm.userId);
      setEventName(editingForm.eventName);
      setLocation(editingForm.location);
      setDate(editingForm.date);
      setParticipants(editingForm.participants.length > 0 ? editingForm.participants : [""]);
      setObjectives(editingForm.objectives);
      setDescription(editingForm.description);
    }
  }, [editingForm]);

  const handleParticipantChange = (index, value) => {
    const newParticipants = [...participants];
    newParticipants[index] = value;
    setParticipants(newParticipants);
  };

  const addParticipant = () => {
    setParticipants([...participants, ""]);
  };

  const handleSubmit = (e) => {
    e.preventDefault();

    const formData = {
      id: editingForm ? editingForm.id : Date.now().toString(),
      userName,
      userId,
      eventName,
      location,
      date,
      participants: participants.filter((p) => p.trim() !== ""),
      objectives,
      description,
      status: editingForm ? editingForm.status : "open",
    };

    if (editingForm) {
      updateForm(formData);
    } else {
      addForm(formData);
    }

    navigate("/admin");
  };

  return (
    <div className="form-header">
      <h1 className="header-align">{editingForm ? "Edit Event" : "Add New Event"}</h1>
      <p className="subheading">
        {editingForm
          ? "Update the details below and save."
          : "Fill in the details below to create your event."}
      </p>
      <div className="event-form-wrapper">
        <form className="event-form" onSubmit={handleSubmit}>
          <div className="form-row">
            <div className="form-group">
              <label>User Name</label>
              <input
                type="text"
                placeholder="John Doe"
                value={userName}
                onChange={(e) => setUserName(e.target.value)}
                required
              />
            </div>
            <div className="form-group">
              <label>User ID</label>
              <input
                type="text"
                placeholder="R720133"
                value={userId}
                onChange={(e) => setUserId(e.target.value)}
                required
              />
            </div>
          </div>

          <div className="form-row">
            <div className="form-group">
              <label>Event Name</label>
              <input
                type="text"
                placeholder="Tech Conference 2025"
                value={eventName}
                onChange={(e) => setEventName(e.target.value)}
                required
              />
            </div>
            <div className="form-group">
              <label>Location</label>
              <select
                value={location}
                onChange={(e) => setLocation(e.target.value)}
                required
              >
                <option value="">Select location</option>
                <option value="London">London</option>
                <option value="New York">New York</option>
                <option value="Bangalore">Bangalore</option>
                <option value="Tokyo">Tokyo</option>
              </select>
            </div>
            <div className="form-group date-group">
              <label>Date</label>
              <input
                type="date"
                value={date}
                onChange={(e) => setDate(e.target.value)}
                required
              />
            </div>
          </div>

          <div className="form-row participants-row">
            <div className="form-group full-width">
              <label className="participants-label">Participants</label>
              <div className="participants-list">
                {participants.map((participant, index) => (
                  <input
                    key={index}
                    type="text"
                    placeholder={`Participant ID ${index + 1}`}
                    value={participant}
                    onChange={(e) => handleParticipantChange(index, e.target.value)}
                    className="participant-input"
                  />
                ))}
                <button
                  type="button"
                  className="add-participant"
                  onClick={addParticipant}
                >
                  + Add More
                </button>
              </div>
            </div>
          </div>

          <div className="form-row">
            <div className="form-group full-width">
              <label>Objectives</label>
              <textarea
                rows="3"
                placeholder="Discuss advancements in AI technology."
                value={objectives}
                onChange={(e) => setObjectives(e.target.value)}
              />
            </div>
          </div>

          <div className="form-row">
            <div className="form-group full-width">
              <label>Description</label>
              <textarea
                rows="4"
                placeholder="Add additional notes or event agenda..."
                value={description}
                onChange={(e) => setDescription(e.target.value)}
              />
            </div>
          </div>

          <div className="form-actions">
            <button type="submit">
              {editingForm ? "Save Changes" : "Create Event"}
            </button>
          </div>
        </form>
      </div>
    </div>
  );
};

export default EventForm;


body {
  margin: 0;
  padding: 0;
  background-color: #f0f2f5;
  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;
}

.form-header {
  margin: 2rem auto;          /* center and add vertical spacing */
  max-width: 1280px;
  width: 90%;
}

.header-align{
  text-align: center;
}

.form-header h1 {
  font-size: 2.2rem;
  font-weight: 700;
  color: #262750;
  margin-bottom: 0.5rem;
  text-align: center;
}

.subheading {
  font-size: 1rem;
  color: #6c757d;
  margin-top: 0;
  text-align: center;
}

/* Wrapper around the form */
.event-form-wrapper {
  background-color: #ffffff;
  padding: 3rem;
  margin: 0 auto 2rem auto;  /* center and give bottom space */
  max-width: 1280px;
  border-radius: 16px;
  box-shadow: 0 10px 30px rgba(0, 0, 0, 0.1);
  width: 90%;
}

/* Actual form inside the wrapper */
.event-form {
  max-width: 800px;         /* limit form width for readability */
  margin: 0 auto;           /* center form inside wrapper */
  display: flex;
  flex-direction: column;
  gap: 2rem;
}

.form-row {
  display: flex;
  flex-wrap: wrap;
  gap: 1.5rem;
}

.form-group {
  flex: 1;
  min-width: 280px;
  display: flex;
  flex-direction: column;
}
.form-group.date-group {
  flex: 0 0 200px; /* date column fixed smaller width */
}

.full-width {
  width: 100%;
}

label {
  margin-bottom: 0.6rem;
  font-weight: 500;
  color: #333;
  font-size: 1rem;
}

input,
select,
textarea {
  padding: 1rem;
  border: 1px solid #ccc;
  border-radius: 10px;
  font-size: 1rem;
  background-color: #f9f9fa;
  transition: border 0.2s ease, box-shadow 0.2s ease;
}

input:focus,
select:focus,
textarea:focus {
  border-color: #0068c9;
  box-shadow: 0 0 0 4px rgba(0, 104, 201, 0.12);
}

textarea {
  resize: vertical;
  min-height: 100px;
}

.participants-label {
  font-weight: 600;
  font-size: 1.1rem;
  margin-bottom: 1rem;
  display: block;
}

.participants-list { 
  display: flex;
  flex-wrap: wrap;
  gap: 1rem;
  align-items: center
}

.participant-input {
  width: auto;
  min-width: 160px;
  max-width: 200px;
  flex: 0 0 auto;
  padding: 0.8rem 1rem;
}
input[type="date"] {
  padding: 0.8rem 1rem;
}

.add-participant {
  align-self: flex-start;
  margin-top: 0.5rem;
  padding: 0.6rem 1.2rem;
  background-color: #e8f0fe;
  border: 1px solid #0068c9;
  color: #0068c9;
  border-radius: 8px;
  font-weight: 500;
  cursor: pointer;
  transition: background-color 0.2s ease;
  height: fit-content;
}

.add-participant:hover {
  background-color: #d1e5fb;
}

.form-actions {
  text-align: center;
}

button[type="submit"] {
  padding: 1rem 3rem;
  background-color: #10a37f;
  color: white;
  border: none;
  border-radius: 12px;
  font-size: 1.1rem;
  font-weight: 600;
  cursor: pointer;
  transition: background-color 0.2s ease, transform 0.1s ease;
}

button[type="submit"]:hover {
  background-color: #0e8f6e;
  transform: scale(1.03);
}

@media (max-width: 768px) {
  .form-row {
    flex-direction: column;
  }

  .event-form-wrapper {
    padding: 2rem;
  }
}

