func createRequest(vars ScenarioConfig, endpoint string, method string) (*http.Request, error) {
    raw := vars.Get(NamingEndpoint)

    urlList, ok := raw.([]interface{})
    if !ok {
        return nil, fmt.Errorf("expected naming-api-endpoint to be a list of strings")
    }

    for _, u := range urlList {
        baseURL, ok := u.(string)
        if !ok {
            continue // skip non-string values
        }

        fullURL := baseURL + endpoint
        body := bytes.NewBuffer(nil)

        req, err := http.NewRequest(method, fullURL, body)
        if err != nil {
            continue
        }

        token, _, err := ida.GetIdaAccessToken(
            vars.Get(ClientId),
            vars.Get(NamingResourceUri),
            vars.Get(RedirectUrl),
            vars.Get(IdaProviderProd),
        )
        if err != nil {
            continue
        }

        req.Header.Set("Content-Type", "application/json")
        req.Header.Set("Authorization", "Bearer "+token)

        return req, nil // ‚úÖ first successful request
    }

    return nil, fmt.Errorf("failed to create request for all naming-api-endpoints")
}



ctx.When(expr: "^a GET request is sent to the (.*) endpoint (.*)$", func(ctx context.Context, api string, endpoint string) (context.Context, error) {
    state := shared_state.GetSharedState(ctx)
    config := GetScenarioConfig(ctx)
    logger := scenario_logging.GetScenarioLogger(ctx)

    // ‚û§ Host 1: NamingEndpoint
    logger.Step("üîπ [Host: NamingEndpoint] Sending request to: %s", endpoint)
    namingReq, err := createNamingRequest(config, endpoint, http.MethodGet)
    if err != nil {
        return ctx, errors.Wrap(err, "failed to create request for NamingEndpoint")
    }

    namingResp, err := sendRequest(namingReq)
    if err != nil {
        return ctx, errors.Wrap(err, "request failed for NamingEndpoint")
    }

    // ‚úÖ Only record this response for use in Then steps
    err = state.ApiUnderTest.RecordResponse(*namingReq, *namingResp)
    if err != nil {
        return ctx, errors.Wrap(err, "failed to record Naming response")
    }

    logger.Step("‚úÖ [Host: NamingEndpoint] Response recorded successfully")

    // ‚û§ Host 2: GJRNEndpoint (if enabled)
    if flag, ok := config.Get("enable-gjrn-tests").(bool); ok && flag {
        logger.Step("üîπ [Host: GJRNEndpoint] Sending request to: %s", endpoint)

        gjrnReq, err := createGJRNRequest(config, endpoint, http.MethodGet)
        if err != nil {
            logger.Step("‚ùå GJRN request creation failed: %v", err)
            return ctx, err
        }

        gjrnResp, err := sendRequest(gjrnReq)
        if err != nil {
            logger.Step("‚ùå GJRN request failed: %v", err)
            return ctx, err
        }

        logger.Step("‚úÖ [Host: GJRNEndpoint] Response received successfully")

        // ‚õî Do NOT record GJRN response to shared state ‚Äî used only for observation/logs
        // Optionally, you could compare the response here or log it
    }

    return ctx, nil
})
