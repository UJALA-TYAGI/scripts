Absolutely! Here's the updated and **Markdown-formatted** documentation for the **List Resources** operation in the **Atlas 2.0 environment**, with the **field descriptions section removed** as requested:

---

# üìò Atlas 2.0 API Resource Operations

This document serves as a comprehensive guide to interact with resources in the **Atlas 2.0 environment**. The APIs exposed here follow Kubernetes-style conventions and enable users to manage domain-specific resources such as AWS boundaries through standard operations like **list**, **create**, **update**, and **delete**.

All resources are namespaced, and each operation requires specifying the appropriate **API group**, **resource kind**, and **namespace**.

---

Got it! You want a **single combined section** that clearly lists:

* The **available API groups**
* Which **resource kinds** each API group supports (more precise mapping)

Here‚Äôs a neat, clear Markdown section that does exactly that ‚Äî structured so users immediately see what resources belong to which API groups.

---

## üß≠ API Groups and Supported Resources

The Atlas 2.0 environment exposes multiple API groups, each corresponding to a specific domain. Each API group supports one or more resource kinds as outlined below:

| API Group                                    | Supported Resource Kinds                                                                  |
| -------------------------------------------- | ----------------------------------------------------------------------------------------- |
| `portfolio.wholesale.atlas.aws.jpmchase.net` | `awspb` (AWS Portfolio Boundaries)                                                        |
| `marketplace.retail.atlas.aws.jpmchase.net`  | `awsmktpwb` (AWS Marketplace Workload Boundaries)                                         |
| `network.wholesale.atlas.aws.jpmchase.net`   | `awsnb` (AWS Network Boundaries), <br> `awssharedvpcendpoints` (AWS Shared VPC Endpoints) |
| `workload.wholesale.atlas.aws.jpmchase.net`  | `awsworkloadboundaries` (AWS Workload Boundaries)                                         |

---

# ‚úÖ Operation: List Resources

## üìÑ Overview

Use this API operation to retrieve all existing resources of a particular kind within a specific namespace. This helps users inspect the current state of resources managed under Atlas 2.0.

---

## üîó Endpoint

```
GET /apis/<API_GROUP>/v1alpha1/namespaces/<NAMESPACE>/<RESOURCE_KIND>
```

---

## üî∏ Path Parameters

| Parameter         | Required | Description                                           |
| ----------------- | -------- | ----------------------------------------------------- |
| `<API_GROUP>`     | ‚úÖ        | One of the supported API groups listed above          |
| `<NAMESPACE>`     | ‚úÖ        | Kubernetes namespace where the resources are deployed |
| `<RESOURCE_KIND>` | ‚úÖ        | One of: `awspb`, `awsnb`, or `awsmktpwb`              |

---

## üßæ Required Headers

```http
Authorization: Bearer <your-auth-token>
Content-Type: application/json
```

---

## üåê Sample Request URLs

```
GET https://<BASE_URL>/apis/portfolio.wholesale.atlas.aws.jpmchase.net/v1alpha1/namespaces/dev/awspb

GET https://<BASE_URL>/apis/network.wholesale.atlas.aws.jpmchase.net/v1alpha1/namespaces/test/awsnb

GET https://<BASE_URL>/apis/marketplace.retail.atlas.aws.jpmchase.net/v1alpha1/namespaces/prod/awsmktpwb
```

---

## ‚úÖ Success Response

**Status Code:** `200 OK`
**Content-Type:** `application/json`

```json
{
  "apiVersion": "v1",
  "items": [
    {
      "metadata": {
        "name": "sample-resource",
        "namespace": "dev"
      },
      "spec": {
        // resource-specific configuration
      }
    }
  ],
  "kind": "List",
  "metadata": {
    "resourceVersion": "123456"
  }
}
```

---

Thanks! Let's document the **Create Resource** operation for the **Atlas 2.0 environment**, following the same clean structure as before. I've corrected typos and formatted the sample YAML to ensure it's readable and valid.

---

# ‚ûï Operation: Create Resource

## üìÑ Overview

Use this API operation to **create a new resource** of a specified kind in a specific namespace. You must provide a valid YAML definition of the resource. The structure should include the correct API version, kind, metadata, and specification (`spec`) fields.

This is typically used when deploying new portfolio boundaries, network boundaries, or marketplace workload boundaries.

---

## üîó Endpoint

```
POST /apis/<API_GROUP>/v1alpha1/namespaces/<NAMESPACE>/<RESOURCE_KIND>
```

---

## üî∏ Path Parameters

| Parameter         | Required | Description                                           |
| ----------------- | -------- | ----------------------------------------------------- |
| `<API_GROUP>`     | ‚úÖ        | One of the supported API groups (see top of document) |
| `<NAMESPACE>`     | ‚úÖ        | Target namespace for the resource                     |
| `<RESOURCE_KIND>` | ‚úÖ        | One of: `awspb`, `awsnb`, or `awsmktpwb`              |

---

## üßæ Required Headers

```http
Authorization: Bearer <your-auth-token>
Content-Type: application/yaml
```

---

## üì§ Request Body

The request body must be a valid YAML definition of the resource.

### üßæ Example: Create a Portfolio Boundary Resource

---

## ‚úÖ Success Response

**Status Code:** `201 Created`
**Content-Type:** `application/json`

```json
{
  "status": "Success",
  "message": "Resource 'example-boundary' created successfully in namespace 'ds-test--105892'."
}
```


## ‚ö†Ô∏è Notes

* The `Content-Type` **must be** `application/yaml`.
* Ensure all required fields in the `spec` section match the schema for the given resource kind.
* If any validation fails (e.g., invalid parent JRN or missing fields), the API will return a `400 Bad Request`.


Let me know when you're ready to proceed to the **Create Resource** operation, and I‚Äôll maintain the same style and clarity.



Great! Let's now document the **Update Resource** operation for the **Atlas 2.0 environment**, in the same structured and Markdown-ready format. This operation typically replaces an existing resource with a new specification (full update).

---

# üîÑ Operation: Update Resource

## üìÑ Overview

Use this API operation to **update an existing resource** of a specific kind in a given namespace. This is a full resource replacement operation ‚Äî the submitted YAML must include the complete specification, not just the modified fields.

If the specified resource does not exist, the request will fail with a `404`.

---

## üîó Endpoint

```
PUT /apis/<API_GROUP>/v1alpha1/namespaces/<NAMESPACE>/<RESOURCE_KIND>/<RESOURCE_NAME>
```

---

## üî∏ Path Parameters

| Parameter         | Required | Description                           |
| ----------------- | -------- | ------------------------------------- |
| `<API_GROUP>`     | ‚úÖ        | One of the supported API groups       |
| `<NAMESPACE>`     | ‚úÖ        | Namespace where the resource exists   |
| `<RESOURCE_KIND>` | ‚úÖ        | One of: `awspb`, `awsnb`, `awsmktpwb` |
| `<RESOURCE_NAME>` | ‚úÖ        | Name of the resource to be updated    |

---

## üßæ Required Headers

```http
Authorization: Bearer <your-auth-token>
Content-Type: application/yaml
```

---

## üì§ Request Body

You must provide the full YAML definition of the resource, including unchanged fields. Partial updates are not supported in this operation (use PATCH for that).

### üßæ Example: Update an Existing Portfolio Boundary Resource

```yaml
apiVersion: portfolio.wholesale.atlas.aws.jpmchase.net/v1alpha1
kind: AWSPortfolioBoundary
metadata:
  name: example-boundary
  namespace: ds-test--105892
spec:
  deploymentScope:
    jrn: jrn:jpm:iep-test:::depscope:103892?version=2   # Version updated
  enabledRegions:
    - us-west-2
    - us-east-1   # New region added
  orgUnitName: 13-atlas2testing-v2-ou-2009c891-2
  parent:
    jrn: jrn:jpm:atlas-dev:awdla:ds-test--103892:awspb:12-atlas2testing-v4
  satisfiedControls:
    connectivity: jrn:jpm:atlas:::connect:internal
    dataclassification: jrn:jpm:atlas:::dataclass:internal
    hitrust: jrn:jpm:atlas:::hitrust:none
    jurisdiction: jrn:jpm:atlas:::jur:default
    pci: jrn:jpm:atlas:::pci:cat3
    soc: jrn:jpm:atlas:::soc:none
    sox: jrn:jpm:atlas:::sox:false
  scps:
    - jrn: jrn:jpm:atlas-dev:awdla:ds-dev--atlas2-platform-alpha-app-v1:awsongscp:full-aws-access
  trustedScopes:
    - attributes:
        - key: ipme-sealappid
          value: "89774"
        - key: apne-sealdeptoid
          value: "183892"
      name: i-trust-portfolio-boundary
      type: Portfolio
```

---

## ‚úÖ Success Response

**Status Code:** `200 OK`
**Content-Type:** `application/json`

```json
{
  "status": "Success",
  "message": "Resource 'example-boundary' updated successfully in namespace 'ds-test--105892'."
}
```

---

## ‚ùå Error Scenario

If the resource does not exist, or if the YAML is invalid, the update will fail.

### üìâ Example: Resource Not Found

**Status Code:** `404 Not Found`
**Content-Type:** `application/json`

```json
{
  "status": "Failure",
  "message": "Resource 'example-boundary' not found in namespace 'ds-test--105892'."
}
```

### üìâ Example: Validation Error

**Status Code:** `400 Bad Request`

```json
{
  "status": "Failure",
  "message": "Validation failed for resource 'example-boundary'.",
  "errors": [
    "spec.trustedScopes[0].attributes[1].key is missing",
    "spec.deploymentScope.jrn is not in a valid JRN format"
  ]
}
```

---

## ‚ö†Ô∏è Notes

* This is a **full update** (like a PUT operation in REST); it replaces the entire resource object.
* Always retrieve the latest state of the resource before making an update, to avoid unintentional overwrites.
* Use `PATCH` if you only want to modify specific fields.

---

Let me know if you'd like to move on to the **Patch** or **Delete** operation next ‚Äî I‚Äôll continue in the same format.

